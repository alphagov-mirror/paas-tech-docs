# Managing apps

## Connecting with SSH

When you deploy an app to GOV.UK PaaS, that app runs in a container.

If you use a [standard buildpack](responsibility_model.html#standard-buildpack-responsibilities), you can connect directly to an app’s container using SSH.

Connecting using SSH gives you secure access to change an app's container.

If you make changes to your app's container during an SSH session, these changes are not permanent and are specific to that app instance. You must push a new version of your app to make any permanent changes to your app.

Before you connect to an app's container using SSH, you must:

- install the [Cloud Foundry Command Line Interface (CLI)](https://github.com/cloudfoundry/cli)
- set up the [correct SSH permissions](#manage-ssh-permissions) on the app and the space the app is in

1. If you’re using version 3 of the Cloud Foundry API, run the following to start an SSH session:

    ```
    cf v3-ssh APPNAME
    ```

    where `APPNAME` is the name of the app.

    If you are using version 2 of the Cloud Foundry API, run:

    ```
    cf ssh APPNAME
    ```

    The Cloud Foundry CLI will generate SSH keys for you.

2. To match your SSH environment to your app's environment, run the following from within your SSH session shell:

    ```
    /tmp/lifecycle/shell
    ```

3. Run `exit` to end the SSH session.

For more information, refer to the [Cloud Foundry documentation on SSH session environments](https://docs.cloudfoundry.org/devguide/deploy-apps/ssh-apps.html#ssh-env).

### Connecting to multiple instances

If you’re running [multiple instances](/managing_apps.html#scaling) of an app, you can connect to a specific app instance using SSH.

Each instance of an app has an index number. Cloud Foundry assigns index numbers to app instances when you create those app instances.

1. Run `cf app APPNAME` to see the app index numbers in the output. For example:

    ```
    requested state: started
    instances: 3/3
    usage: 64M x 3 instances
    urls: myapp.london.cloudapps.digital
    last uploaded: Wed Dec 21 13:56:24 UTC 2016
    stack: cflinuxfs3
    buildpacks:
      - staticfile_buildpack

    .   state     since                    cpu    memory        disk         details
    0   running   2016-12-21 02:27:11 PM   3.0%   7.1M of 64M   6.8M of 1G
    1   running   2016-12-21 02:44:46 PM   1.0%   3.5M of 64M   6.8M of 1G
    2   running   2016-12-21 02:44:46 PM   1.0%   3.5M of 64M   6.8M of 1G
    ```

1. Run `cf ssh -i APP_INSTANCE_NUMBER APPNAME` to connect to a specific app instance.

    For example, `cf ssh -i 2 myapp` connects to the last app instance in step 1 of the example.

### Connecting to a non-publicly available backing service

The PostgreSQL, MySQL and Redis backing services are not publicly available to everyone on the internet. You can only connect to these backing services from inside Cloud Foundry.

You should use the [Conduit](guidance.html#conduit) plugin to connect to [PostgreSQL](deploying_services/postgresql/#connect-to-a-postgresql-service-from-your-local-machine), [MySQL](deploying_services/mysql/#connect-to-a-mysql-service-from-your-local-machine) or [Redis](deploying_services/redis/#connect-to-a-redis-service-instance-from-your-local-machine) from your local machine.

If you do not want to use Conduit, you can manually create an SSH tunnel to connect to these backing services from your local machine.

The `cf ssh` command supports local port forwarding, which allows you to create tunnels from your local system to the app instance container.

The following example shows how to connect to a PostgreSQL service bound to your app using an SSH tunnel.

1. Run `cf env APPNAME` to show all environment variables for your app. Example output:

    ```
    $ cf env myapp
    Getting env variables for app myapp in org myoth / space myorg as randomuser...
    OK

        System-Provided:
        {
        "VCAP_SERVICES": {
         "postgres": [
         {
         "credentials": {
         "host": "rdsbroker-01-ff-d2.cwm.eu-west-1.rds.amazonaws.com",
         "jdbcUrl": "jdbc:postgresql://rdsbroker-01-ff-d2.cwm.eu-west-1.rds.amazonaws.com:5432/rdsbroker_9f0_97_aa4?user=rdsbroker_9f0_97_aa4_owner\u0026password=xnYXthsgUFwPUOO",
         "name": "rdsbroker_9f0_97_aa4",
         "password": "xnYXthsgUFwPUOO",
         "port": 5432,
         "uri": "postgres://rdsbroker_9f0_97_aa4_owner:xnYXthsgUFwPUOO@rdsbroker-01-ff-d2.cwm.eu-west-1.rds.amazonaws.com:5432/rdsbroker_9f0_97_aa4",
         "username": "rdsbroker_9f0_97_aa4_owner"
        },
        ...
    ```

    Make a note of the:
    - remote `"host":`
    - remote `"port"`
    - PostgreSQL `"username":`
    - PostgreSQL `"password:`
    - database `"name":`

1. Create an SSH tunnel between your local port 6666 and your backing service's remote host and port:


    ```
    cf ssh myapp -T -L 6666:HOST:PORT
    ```

    where:
    - `HOST` is the remote `"host":` from the previous step
    - `PORT` is the remote `"port"` from the previous step

    Refer to the [Cloud Foundry documentation on configuring an SSH tunnel](https://docs.cloudfoundry.org/devguide/deploy-apps/ssh-services.html#ssh-tunnel) for more information.

    <%= warning_text('When you run this command, you’re in a shell in your remote app container. Once you exit the shell, the shell closes the tunnel to the remote host and port.') %>

1. Open a new local command line interface and connect to the local port in `localhost:6666` using a PostgreSQL client:

    ```
    psql postgres://USERNAME:PASSWORD@localhost:6666/DATABASE_NAME
    ```

    where:
    - `USERNAME` is the PostgreSQL `"username":` from step 1
    - `PASSWORD` is the PostgreSQL `"password":` from step 1
    - `DATABASE_NAME` is the database `"name":` from step 1

You have manually created an SSH tunnel to connect to your backing services from your local machine.

For a PostgreSQL backing service, you can also back up the PostgreSQL database using [`pg_dump`](https://www.postgresql.org/docs/9.5/static/backup-dump.html):

```
pg_dump postgres://USERNAME:PASSWORD@localhost:6666/DATABASE_NAME > db.dump
```

### Handshake failure error

If you get the following error, you must [enable SSH for your app](#enabling-ssh-for-an-app):

```
FAILED
Error opening SSH connection: ssh: handshake failed: ssh:
unable to authenticate, attempted methods [none password],
no supported methods remain
```

## Managing SSH permissions

Before you can connect to an app's container with SSH, you must enable SSH for both the app and the space the app is in.

All new apps and spaces have SSH enabled by default. You can enable and disable SSH independently for each space and app.

### Enabling SSH for an app

1. Check if SSH is enabled for an app:

    ```
    cf ssh-enabled APPNAME
    ```

    where `APPNAME` is the name of the app.

1. If you get a message stating that SSH support is disabled for the app, enable SSH by running:

    ```
    cf enable-ssh APPNAME
    ```

    The ``enable-ssh`` command affects all running instances of an app.

### Enabling SSH for a space

You must be an [org manager](orgs_spaces_users.html#org-manager) or a [space manager](orgs_spaces_users.html#space-manager) to enable SSH for a space.

1. [Target the correct space](deploying_apps.html#set-a-target) and check if SSH is enabled in that space:

    ```
    cf space-ssh-allowed SPACENAME
    ```

    where `SPACENAME` is the name of the space.

1. If you get a message stating that SSH support is disabled for the space, enable SSH by running:

    ```
    cf allow-space-ssh SPACENAME
    ```

### Limiting SSH access

You should disable SSH where it’s not needed. For example, you can disable SSH in the `production` space where you host your live apps, but leave SSH enabled in your `development` and `testing` spaces.

Run `cf disable-ssh APPNAME` and restart your app to disable SSH for that app.

Run `cf disallow-space-ssh SPACENAME` to disable SSH for that space.

### Further information

Refer to the [Cloud Foundry documentation on Accessing Apps with SSH](https://docs.cloudfoundry.org/devguide/deploy-apps/ssh-apps.html).
